# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_FastAPI_Streaming_Example.ipynb.

# %% auto 0
__all__ = ['conversation_chain', 'app', 'conversation_chain_dependency', 'Request', 'chat']

# %% ../nbs/03_FastAPI_Streaming_Example.ipynb 1
from functools import lru_cache
from typing import Callable

from fastapi import Depends, FastAPI
from pydantic import BaseModel
from langchain import ConversationChain
from langchain.callbacks import AsyncCallbackManager
from langchain.chat_models import ChatOpenAI

from fastapi_async_langchain.response import LangchainStreamingResponse

# %% ../nbs/03_FastAPI_Streaming_Example.ipynb 2
def conversation_chain_dependency() -> Callable[[], ConversationChain]:
    @lru_cache(maxsize=1)
    def dependency() -> ConversationChain:
        return ConversationChain(
            llm=ChatOpenAI(
                temperature=0,
                streaming=True,
                callback_manager=AsyncCallbackManager([]),
            ),
            verbose=True,
        )

    return dependency

conversation_chain = conversation_chain_dependency()

# %% ../nbs/03_FastAPI_Streaming_Example.ipynb 3
app = FastAPI(title="StreamingConversationChainAPI")

# %% ../nbs/03_FastAPI_Streaming_Example.ipynb 4
class Request(BaseModel):
    query: str

# %% ../nbs/03_FastAPI_Streaming_Example.ipynb 5
@app.post("/chat")
async def chat(
    request: Request,
    chain: ConversationChain = Depends(conversation_chain),
) -> LangchainStreamingResponse:
    return LangchainStreamingResponse(
        chain, request.query, media_type="text/event-stream"
    )
